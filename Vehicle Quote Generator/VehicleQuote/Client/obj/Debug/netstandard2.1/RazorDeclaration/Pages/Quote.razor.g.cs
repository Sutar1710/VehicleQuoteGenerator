// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace VehicleQuote.Client.Pages
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using VehicleQuote.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\_Imports.razor"
using VehicleQuote.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\Pages\Quote.razor"
using VehicleQuote.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\Pages\Quote.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/quote")]
    public partial class Quote : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 139 "C:\Users\alaxmansutar\OneDrive - DXC Production\Desktop\Vehicle Quote Generator\VehicleQuote\Client\Pages\Quote.razor"
       
    User user = new User();
    Types types = new Types();
   

    void Handle()
    {
        Console.WriteLine("--------");
    }

    private string vtype;//myvehicle

    public string type
    {
        get
        {
            return vtype;
        }
        set
        {
            vtype = value;
            user.vehicletype = value;
            selectType();
        }
    }

  
    List<Types> CarType = new List<Types>();
    public void selectType()
    {
        string Vtype = type;



        try
        {
            if (Vtype == "Existing Vehicle")
            {

                CarType = new List<Types>
                {
                    new Types(){age="1 Year", ord_age=0.0 },
                    new Types(){age="2 Years", ord_age=0.1 },
                    new Types(){age="3 Years", ord_age=0.2},
                    new Types(){age="4 Years", ord_age=0.3 },
                    new Types(){age="5 Years", ord_age=0.4 },


                };
            }
            if (Vtype == "New Vehicle")
            {
                CarType = new List<Types>
                    {
                        new Types {age = "new vehicle", ord_age=0.0},
                    };
            }


        }

        catch (Exception e)
        {

        }

    }
    public string vehicle;
    public string model
    {
        get
        {
            return vehicle;
        }
        set
        {
            vehicle = value;
            user.vehiclemake = value;
            selectModel();
        }
    }

    List<CarsModels> CarList = new List<CarsModels>();

    public void selectModel()
    {
        vehicle= model;
        try
        {
            if (vehicle == "Renault")
            {
                CarList = new List<CarsModels>
                {
                   new CarsModels(){make= "Kwid"},
                    new CarsModels(){make="triber"},
                    new CarsModels(){make= "Nexon"},
                    new CarsModels(){make= "Tiago"},

                };
            }
            if (vehicle == "Tata")
            {
                CarList = new List<CarsModels>
                {
                   new CarsModels(){make="Nexon"},
                    new CarsModels(){make="Tiago"},
                    new CarsModels(){make="Altroz"},
                     new CarsModels(){make="Harrier"},

                };
            }
            if (vehicle == "Maruti")
            {
                CarList = new List<CarsModels>
                {
                   new CarsModels(){make="Brezza"},
                    new CarsModels(){make="Dzire"},
                    new CarsModels(){make="Baleno"},
                    new CarsModels(){make="Fronx"},

                };

            }
        }
        catch (Exception e)
        {

        }
    }

    ICollection<PremiumRates> premiumRatesLS;
    ICollection<VehiclesIDV> vehiclesIDVLS;
    protected override void OnInitialized()
    {
        try
        {
            premiumRatesLS = new List<PremiumRates>();
            vehiclesIDVLS = new List<VehiclesIDV>();
            PremiumRates premiumRate1 = new PremiumRates("Private Car", 1.28, 700);
            PremiumRates premiumRate2 = new PremiumRates("Goods Carrying Vehicle", 0.52, 3900);
            PremiumRates premiumRate3 = new PremiumRates("Passenger Carrying Vehicle", 0.68, 1300);
            premiumRatesLS.Add(premiumRate1);
            premiumRatesLS.Add(premiumRate2);
            premiumRatesLS.Add(premiumRate3);
            VehiclesIDV vehiclesIDV1 = new VehiclesIDV("Private Car", "Renault", "Kwid", 37_000);
            VehiclesIDV vehiclesIDV2 = new VehiclesIDV("Private Car", "Tata", "Nexon", 60_000);
            VehiclesIDV vehiclesIDV3 = new VehiclesIDV("Goods Carrying Vehicle", "Maruti", "Brezza", 51_000);
            VehiclesIDV vehiclesIDV4 = new VehiclesIDV("Passenger Carrying Vehicle", "Kia", "EV6", 90_540);
            VehiclesIDV vehiclesIDV5 = new VehiclesIDV("Private Car", "Others", "Car", 50_000);
            vehiclesIDVLS.Add(vehiclesIDV1);
            vehiclesIDVLS.Add(vehiclesIDV2);
            vehiclesIDVLS.Add(vehiclesIDV3);
            vehiclesIDVLS.Add(vehiclesIDV4);
            vehiclesIDVLS.Add(vehiclesIDV5);

        }
        catch (Exception ex)
        {
        }
    }

    (double comprehensiveCoverage, int limitedlibality) GetRates(string vehicleType)
    {
        IList<PremiumRates> rates = premiumRatesLS.Where(p => p.VehicleType == vehicleType).ToList();

        return (rates[0].comprehensiveCoverage, rates[0].Limitedlibality);
    }
    (int idv, string type) GetIDV(string make, string model)
    {
        var idv = (from vehicleIDV in vehiclesIDVLS where vehicleIDV.Make.ToLower() == make.ToLower() && vehicleIDV.Model.ToLower() == model.ToLower() select new { vehicleIDV.vehicleType, vehicleIDV.IDV }).ToList();
        if (idv.Count == 0)
        {
            idv = (from vehicleIDV in vehiclesIDVLS where vehicleIDV.Make == "Others" select new { vehicleIDV.vehicleType, vehicleIDV.IDV }).ToList();
        }
        return (idv[0].IDV, idv[0].vehicleType);
    }

    private string _message = "Processing";

    public async Task<User> Create()
    {

        try
        {
            if (user.vehicletype == "Existing Vehicle" && user.vehiclecoverage == "Liability")
            {
                var idvValue = GetIDV(user.vehiclemake.ToLower(), user.vehiclemodel.ToLower());
                var rates = GetRates(idvValue.type); 
                user.formula = "Dear " + user.username + " for your " + @user.vehiclemake + " " + @user.vehiclemodel + " Vehicle ,the total quote is $ " + Math.Round((double)rates.limitedlibality, 2) + " .Thank you!";
            }
            else if (user.vehicletype == "Existing Vehicle" && user.vehiclecoverage == "Comprehensive")
            {
                var idvValue = GetIDV(user.vehiclemake, user.vehiclemodel);
                var rates = GetRates(idvValue.type);
                var compreshenivePolicy = (idvValue.idv * (1 - (types.ord_age)) * rates.comprehensiveCoverage / 100) + rates.limitedlibality;
                user.formula = "Dear " + user.username + " for your " + @user.vehiclemake + " " + @user.vehiclemodel + " Vehicle ,the total quote is $ " + Math.Round(compreshenivePolicy, 2) + " .Thank you! ";
            }
            else if (user.vehiclecoverage == "Comprehensive" && user.vehicletype == "New Vehicle")
            {
                var idvValue = GetIDV(user.vehiclemake, user.vehiclemodel);
                var rates = GetRates(idvValue.type);
                var compreshenivePolicy = ((idvValue.idv * rates.comprehensiveCoverage) / 100) + rates.limitedlibality;
                user.formula = "Dear " + user.username + " for your " + @user.vehiclemake + " " + @user.vehiclemodel + " Vehicle ,the total quote is $ " + Math.Round(compreshenivePolicy, 2) + " .Thank you! ";
            }
            else if (user.vehiclecoverage == "Liability" && user.vehicletype == "New Vehicle")
            {
                var idvValue = GetIDV(user.vehiclemake, user.vehiclemodel);
                var rates = GetRates(idvValue.type);
                user.formula = "Dear " + user.username + " for your " + @user.vehiclemake + " " + @user.vehiclemodel + " Vehicle ,the total quote is $ " + Math.Round((double)rates.limitedlibality, 2) + " .Thank you! ";
            }

        }
        catch (Exception ex)
        {
        }


        var result = await Http.PostAsJsonAsync<User>($"api/QuoteGenerate", user);


        var finalResult = await result.Content.ReadFromJsonAsync<User>();
        return finalResult;
      

    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
